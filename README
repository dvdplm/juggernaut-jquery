Juggernaut
===========

=CONTACT DETAILS

  Author: Alex MacCaw
  E-Mail Address: info@alexmaccaw.co.uk
  License: MIT
  Website: http://juggernaut.rubyforge.org
  Blog: http://www.eribium.org

=DESCRIPTION

The Juggernaut plugin for Ruby on Rails aims to revolutionize your Rails app by letting the server initiate a connection and push data to the client. In other words your app can have a real time connection to the server with the advantage of instant updates. Although the obvious use of this is for chat, the most exciting prospect for me is collaborative cms and wikis.

What Happens:

   1. Client A opens socket connection to the socket server
   2. Client B makes Ajax call to Rails
   3. Rails sends message to the socket server
   4. Socket server broadcasts message to clients

Juggernaut Features:

    * Allows a real time connection with a client - Rails can literally push javascript in real time to the client which is then evaluated.
    * Push server - written in Ruby.
    * Integrated, as a plugin, into Rails.
    * Subscribers can subscribe to multiple channels, and broadcasters can broadcast to multiple channels.
    * Subscribers can provide a 'unique_id' and broadcasters can send data to specific clients.
    * Add and remove channels at runtime
    * Uses Flash 8 - installed on more than 95% of computers.
    * Supports all the major browsers (uses ExternalInterface): Firefox 1+, IE 6+ and Safari 2+.

Requirements:

    * Rails 1.1+
    * json gem (gem install json)
    * eventmachine gem (gem install eventmachine OR gem install eventmachine-win32)
    If you're having trouble installing/starting the eventmachine on windows with an old ruby version, try eventmachine-win32-0.5.2.gem


===============================================
INSTALLATION
===============================================

   1. Get the plugin from: http://rubyforge.org/frs/?group_id=1884 or alternatively get it from the svn: 
      svn://rubyforge.org//var/svn/juggernaut/trunk/juggernaut and put it in the dir: vendor/plugins 
   2. Make sure to include the appropriate JavaScripts in your views/layouts
      in the header of your views
      <%= javascript_include_tag 'prototype', :juggernaut %>
   3. Add this to your view/layout head:
      <%= juggernaut %>
   4. Make sure the JSON library is installed (gem install json).
   7. Configure the ports and host in config/juggernaut_hosts.yml. 

And you are all set!


Usage

To demonstrate Juggernaut I'll walk you through building a simple chat.

Start the push server going by running:
ruby script/push_server # todo - not accurate

The chat controller:

class ChatController < ApplicationController
  def index
  end
	
  def send_data
    render :juggernaut do |page|
      page.insert_html :top, 'chat_data', "<li>#{h params[:chat_input]}</li>"
    end
    render :nothing => true
  end
end


The index.rhtml

	<html>
	  <head>
	    <%= javascript_include_tag :defaults, :juggernaut %>
	    <%= juggernaut %>
	  </head>
	  <body>
	    <%= form_remote_tag(
	          :url => { :action => :send_data },
	          :complete => "$('chat_input').value = ''" ) %>
	      <%= text_field_tag( 'chat_input', '', { :size => 20, :id => 'chat_input'} ) %>
	      <%= submit_tag "Add" %>
	    </form>
	    <ul id="chat_data" style="list-style:none">
	    </ul>
	  </body>
	</html>

Start the webserver going with:
ruby script/server

Try it and see what you think. If it doesn't work please visit the faq.

Other ways of rendering to juggernaut:

render :juggernaut do |page|
  page.alert('hi')
end

render_juggernaut(:action => 'whatever')

===============================================
More usage information, examples and support
===============================================

Usage and examples: http://ncavig.com/blog/
Support and forums: http://groups.google.com/group/Juggernaut-for-Rails?hl=en 

===============================================
Troubleshooting
===============================================

Check out the support forums on google groups:
http://groups.google.com/group/Juggernaut-for-Rails

More here soon!

===============================================
FAQ
===============================================


Juggernaut doesn't seem to be connecting.

Firstly make sure you're not behind a firewall.

Or that you're trying to communicate to a different domain.

    The XMLSocket.connect method can connect only to computers in the same subdomain where the SWF file (movie) resides.

Obviously the port number can be different than the one that the swf is served on. You can check to see what ports and addresses flash is trying to communicate with by looking at the html source. The port, address and channels are sent to flash via parameters in the swf address. The host in the parameters should be the same as the host the html file is served from (or at least in the same subdomain). Likewise you can check the port number is over 1024 here too.

What flash version does Juggernaut use?
Flash socket uses version 8 which is supported by more than 90% of users.

Does it work in all browsers?
It has been tested in all the major ones: Firefox 1+, IE 6+ and Safari 2+.

What are the advantages/disadvantages of using a flash socket over other methods?
It's better than comet because:

    * It's much less of a hack
    * It doesn't crash your browser (Comet can do this after a while)
    * 90% of browsers support it (flash 8).
    * It's much easier to implement
    * It can use a different port - unlike comet - so you don't need any custom dispatch servlets for forwarding messages through rails to the push server - it can connect directly.

It's better than polling because:

    * Much cleaner
    * Doesn't use as many server resources

Why need an external push server - can't you make everything part of rails?
Rails uses FastCGI , each HTTP request to a rails app is handled by a whole rails process. Each rails process takes up more than ten megabytes, so for 100 push connections, more than 1000 mb would be needed. Because of this we need a webserver, external to Rails.

Doesn't a Ruby webserver take up a lot of resources and is quite slow?
With many threads you might see performance issues. My advice is to re-write the push server in C - please let me know if you've done this.

What are you doing to extend this?
Extending it to other technologies apart from html, such as Air (check this out: http://www.eribium.org/blog/?p=134).
